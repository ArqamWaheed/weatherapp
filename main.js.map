{"version":3,"file":"main.js","mappings":"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","sources":["webpack://webpack-template/webpack/runtime/create fake namespace object","webpack://webpack-template/webpack/runtime/load script","webpack://webpack-template/./src/weather-icons/ lazy ^\\.\\/.*\\.svg$ strict namespace object","webpack://webpack-template/webpack/bootstrap","webpack://webpack-template/webpack/runtime/define property getters","webpack://webpack-template/webpack/runtime/ensure chunk","webpack://webpack-template/webpack/runtime/get javascript chunk filename","webpack://webpack-template/webpack/runtime/get mini-css chunk filename","webpack://webpack-template/webpack/runtime/global","webpack://webpack-template/webpack/runtime/hasOwnProperty shorthand","webpack://webpack-template/webpack/runtime/make namespace object","webpack://webpack-template/webpack/runtime/publicPath","webpack://webpack-template/webpack/runtime/jsonp chunk loading","webpack://webpack-template/./src/core/weatherServices.js","webpack://webpack-template/./src/core/weatherModel.js","webpack://webpack-template/./src/ui/cacheDOM.js","webpack://webpack-template/./node_modules/date-fns/locale/en-US/_lib/formatDistance.js","webpack://webpack-template/./node_modules/date-fns/locale/_lib/buildFormatLongFn.js","webpack://webpack-template/./node_modules/date-fns/locale/en-US/_lib/formatLong.js","webpack://webpack-template/./node_modules/date-fns/locale/en-US/_lib/formatRelative.js","webpack://webpack-template/./node_modules/date-fns/locale/_lib/buildLocalizeFn.js","webpack://webpack-template/./node_modules/date-fns/locale/_lib/buildMatchFn.js","webpack://webpack-template/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","webpack://webpack-template/./node_modules/date-fns/locale/en-US.js","webpack://webpack-template/./node_modules/date-fns/locale/en-US/_lib/localize.js","webpack://webpack-template/./node_modules/date-fns/locale/en-US/_lib/match.js","webpack://webpack-template/./node_modules/date-fns/_lib/defaultOptions.js","webpack://webpack-template/./node_modules/date-fns/constants.js","webpack://webpack-template/./node_modules/date-fns/constructFrom.js","webpack://webpack-template/./node_modules/date-fns/toDate.js","webpack://webpack-template/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","webpack://webpack-template/./node_modules/date-fns/startOfDay.js","webpack://webpack-template/./node_modules/date-fns/getDayOfYear.js","webpack://webpack-template/./node_modules/date-fns/differenceInCalendarDays.js","webpack://webpack-template/./node_modules/date-fns/_lib/normalizeDates.js","webpack://webpack-template/./node_modules/date-fns/startOfYear.js","webpack://webpack-template/./node_modules/date-fns/startOfWeek.js","webpack://webpack-template/./node_modules/date-fns/startOfISOWeek.js","webpack://webpack-template/./node_modules/date-fns/getISOWeekYear.js","webpack://webpack-template/./node_modules/date-fns/getISOWeek.js","webpack://webpack-template/./node_modules/date-fns/startOfISOWeekYear.js","webpack://webpack-template/./node_modules/date-fns/getWeekYear.js","webpack://webpack-template/./node_modules/date-fns/getWeek.js","webpack://webpack-template/./node_modules/date-fns/startOfWeekYear.js","webpack://webpack-template/./node_modules/date-fns/_lib/addLeadingZeros.js","webpack://webpack-template/./node_modules/date-fns/_lib/format/lightFormatters.js","webpack://webpack-template/./node_modules/date-fns/_lib/format/formatters.js","webpack://webpack-template/./node_modules/date-fns/_lib/format/longFormatters.js","webpack://webpack-template/./node_modules/date-fns/_lib/protectedTokens.js","webpack://webpack-template/./node_modules/date-fns/isValid.js","webpack://webpack-template/./node_modules/date-fns/isDate.js","webpack://webpack-template/./node_modules/date-fns/format.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/Setter.js","webpack://webpack-template/./node_modules/date-fns/transpose.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/Parser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/constants.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/utils.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/DateParser.js","webpack://webpack-template/./node_modules/date-fns/addDays.js","webpack://webpack-template/./node_modules/date-fns/setDay.js","webpack://webpack-template/./node_modules/date-fns/setISODay.js","webpack://webpack-template/./node_modules/date-fns/getISODay.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/EraParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/YearParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/QuarterParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/MonthParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js","webpack://webpack-template/./node_modules/date-fns/setWeek.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js","webpack://webpack-template/./node_modules/date-fns/setISOWeek.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/DayParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/ISODayParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/AMPMParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/MinuteParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/SecondParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js","webpack://webpack-template/./node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js","webpack://webpack-template/./node_modules/date-fns/parse.js","webpack://webpack-template/./node_modules/date-fns/getDefaultOptions.js","webpack://webpack-template/./src/ui/Display.js","webpack://webpack-template/./src/ui/EventListenersDOM.js","webpack://webpack-template/./src/ui/Validation.js","webpack://webpack-template/./src/core/weatherAPI.js"],"sourcesContent":["var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"webpack-template:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","var map = {\n\t\"./clear-day.svg\": [\n\t\t826,\n\t\t445\n\t],\n\t\"./clear-night.svg\": [\n\t\t358,\n\t\t358\n\t],\n\t\"./cloudy.svg\": [\n\t\t100,\n\t\t100\n\t],\n\t\"./fog.svg\": [\n\t\t836,\n\t\t836\n\t],\n\t\"./hail.svg\": [\n\t\t926,\n\t\t926\n\t],\n\t\"./partly-cloudy-day.svg\": [\n\t\t974,\n\t\t974\n\t],\n\t\"./partly-cloudy-night.svg\": [\n\t\t445,\n\t\t826\n\t],\n\t\"./rain-snow-showers-day.svg\": [\n\t\t129,\n\t\t129\n\t],\n\t\"./rain-snow-showers-night.svg\": [\n\t\t517,\n\t\t517\n\t],\n\t\"./rain-snow.svg\": [\n\t\t470,\n\t\t470\n\t],\n\t\"./rain.svg\": [\n\t\t966,\n\t\t966\n\t],\n\t\"./showers-day.svg\": [\n\t\t4,\n\t\t4\n\t],\n\t\"./showers-night.svg\": [\n\t\t8,\n\t\t8\n\t],\n\t\"./sleet.svg\": [\n\t\t857,\n\t\t857\n\t],\n\t\"./snow-showers-day.svg\": [\n\t\t258,\n\t\t258\n\t],\n\t\"./snow-showers-night.svg\": [\n\t\t494,\n\t\t494\n\t],\n\t\"./snow.svg\": [\n\t\t413,\n\t\t413\n\t],\n\t\"./thunder-rain.svg\": [\n\t\t181,\n\t\t181\n\t],\n\t\"./thunder-showers-day.svg\": [\n\t\t173,\n\t\t173\n\t],\n\t\"./thunder-showers-night.svg\": [\n\t\t593,\n\t\t593\n\t],\n\t\"./thunder.svg\": [\n\t\t818,\n\t\t818\n\t],\n\t\"./wind.svg\": [\n\t\t62,\n\t\t62\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 1 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 741;\nmodule.exports = webpackAsyncContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".main.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwebpack_template\"] = self[\"webpackChunkwebpack_template\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","const convertTemperature = {\n  CtoF(input) {\n    return Math.round(parseInt(input) * 1.8 + 32);\n  },\n  FtoC(input) {\n    return Math.round((parseInt(input) - 32) / 1.8);\n  },\n};\n\nexport { convertTemperature };\n","import getWeatherData from \"./weatherAPI.js\";\nimport { convertTemperature } from \"./weatherServices.js\";\n\nasync function cityWeatherData(cityName) {\n  const data = await getWeatherData(cityName);\n  if (data) {\n    console.log(data);\n    return {\n      cityName: cityName.charAt(0).toUpperCase() + cityName.slice(1), // Capitalizing First Letter\n      time: data.currentConditions.datetime,\n      date: data.days[0].datetime,\n      temperature: convertTemperature.FtoC(data.currentConditions.temp),\n      humidity: data.currentConditions.humidity,\n      feelsLike: convertTemperature.FtoC(data.currentConditions.feelslike),\n      windSpeed: data.currentConditions.windspeed,\n      icon: data.currentConditions.icon,\n      description: data.currentConditions.conditions,\n      currentState: \"C\",\n    };\n  } else {\n    alert(\"There's an error, are you sure you entered a valid city name?\");\n    return null;\n  }\n}\n\nconst currentCity = {\n  cityObj: null,\n};\n\nexport { cityWeatherData, currentCity };\n","const $cityTextInput = document.querySelector(\".searchCityDiv input\");\nconst $submitCityBtn = document.querySelector(\".searchCityDiv button\");\nconst $displayPanelBody = document.querySelector(\".weatherContentDiv\");\nconst $cityText = $displayPanelBody.querySelector(\"#City\");\nconst $tempText = $displayPanelBody.querySelector(\"#temperature\");\nconst $feelsLikeText = $displayPanelBody.querySelector(\".tempDiv div p\");\nconst $humidityText = $displayPanelBody.querySelector(\n  \".tempDiv div p:nth-child(2)\",\n);\nconst $windSpeedText = $displayPanelBody.querySelector(\n  \".tempDiv div p:nth-child(3)\",\n);\nconst $dateDayText = $displayPanelBody.querySelector(\".dayInfo p\");\nconst $descriptionText = $displayPanelBody.querySelector(\n  \".dayInfo p:nth-child(3)\",\n);\nconst $celciusBtn = $displayPanelBody.querySelector(\".tempCelciusText\");\nconst $fahreinheitBtn = $displayPanelBody.querySelector(\".tempFahrenheitText\");\nconst $loadingScreen = document.querySelector(\"#loadingScreen\");\nconst $todayPanelImg = $displayPanelBody.querySelector(\".todayPanelImg\");\n\nexport {\n  $displayPanelBody,\n  $cityTextInput,\n  $submitCityBtn,\n  $cityText,\n  $tempText,\n  $feelsLikeText,\n  $humidityText,\n  $windSpeedText,\n  $dateDayText,\n  $descriptionText,\n  $celciusBtn,\n  $fahreinheitBtn,\n  $loadingScreen,\n  $todayPanelImg,\n};\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.js\";\nimport { formatLong } from \"./en-US/_lib/formatLong.js\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.js\";\nimport { localize } from \"./en-US/_lib/localize.js\";\nimport { match } from \"./en-US/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfYear } from \"./startOfYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nexport function getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getWeekYear } from \"./getWeekYear.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.js\";\nimport { getISOWeek } from \"../../getISOWeek.js\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.js\";\nimport { getWeek } from \"../../getWeek.js\";\nimport { getWeekYear } from \"../../getWeekYear.js\";\n\nimport { addLeadingZeros } from \"../addLeadingZeros.js\";\nimport { lightFormatters } from \"./lightFormatters.js\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { formatters } from \"./_lib/format/formatters.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { constructFrom } from \"../../constructFrom.js\";\nimport { transpose } from \"../../transpose.js\";\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nexport class Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nexport class ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nexport class DateTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n\n  constructor(context, reference) {\n    super();\n    this.context = context || ((date) => constructFrom(reference, date));\n  }\n\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, this.context));\n  }\n}\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam InputDate - The input `Date` type derived from the passed argument.\n * @typeParam ResultDate - The result `Date` type derived from the passed constructor.\n *\n * @param date - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */\nexport function transpose(date, constructor) {\n  const date_ = isConstructor(constructor)\n    ? new constructor(0)\n    : constructFrom(constructor, 0);\n  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  date_.setHours(\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    date.getMilliseconds(),\n  );\n  return date_;\n}\n\nfunction isConstructor(constructor) {\n  return (\n    typeof constructor === \"function\" &&\n    constructor.prototype?.constructor === constructor\n  );\n}\n\n// Fallback for modularized imports:\nexport default transpose;\n","import { ValueSetter } from \"./Setter.js\";\n\nexport class Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n","export const numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nexport const timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n  millisecondsInSecond,\n} from \"../../constants.js\";\n\nimport { numericPatterns } from \"./constants.js\";\n\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nexport function parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nexport class DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"d\":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case \"do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { addDays } from \"./addDays.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const date_ = toDate(date, options?.in);\n  const currentDay = date_.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setDay;\n","import { addDays } from \"./addDays.js\";\nimport { getISODay } from \"./getISODay.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISODay} function options.\n */\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday, etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setISODay(date, day, options) {\n  const date_ = toDate(date, options?.in);\n  const currentDay = getISODay(date_, options);\n  const diff = day - currentDay;\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setISODay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISODay} function options.\n */\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nexport function getISODay(date, options) {\n  const day = toDate(date, options?.in).getDay();\n  return day === 0 ? 7 : day;\n}\n\n// Fallback for modularized imports:\nexport default getISODay;\n","import { EraParser } from \"./parsers/EraParser.js\";\nimport { YearParser } from \"./parsers/YearParser.js\";\nimport { LocalWeekYearParser } from \"./parsers/LocalWeekYearParser.js\";\nimport { ISOWeekYearParser } from \"./parsers/ISOWeekYearParser.js\";\nimport { ExtendedYearParser } from \"./parsers/ExtendedYearParser.js\";\nimport { QuarterParser } from \"./parsers/QuarterParser.js\";\nimport { StandAloneQuarterParser } from \"./parsers/StandAloneQuarterParser.js\";\nimport { MonthParser } from \"./parsers/MonthParser.js\";\nimport { StandAloneMonthParser } from \"./parsers/StandAloneMonthParser.js\";\nimport { LocalWeekParser } from \"./parsers/LocalWeekParser.js\";\nimport { ISOWeekParser } from \"./parsers/ISOWeekParser.js\";\nimport { DateParser } from \"./parsers/DateParser.js\";\nimport { DayOfYearParser } from \"./parsers/DayOfYearParser.js\";\nimport { DayParser } from \"./parsers/DayParser.js\";\nimport { LocalDayParser } from \"./parsers/LocalDayParser.js\";\nimport { StandAloneLocalDayParser } from \"./parsers/StandAloneLocalDayParser.js\";\nimport { ISODayParser } from \"./parsers/ISODayParser.js\";\nimport { AMPMParser } from \"./parsers/AMPMParser.js\";\nimport { AMPMMidnightParser } from \"./parsers/AMPMMidnightParser.js\";\nimport { DayPeriodParser } from \"./parsers/DayPeriodParser.js\";\nimport { Hour1to12Parser } from \"./parsers/Hour1to12Parser.js\";\nimport { Hour0to23Parser } from \"./parsers/Hour0to23Parser.js\";\nimport { Hour0To11Parser } from \"./parsers/Hour0To11Parser.js\";\nimport { Hour1To24Parser } from \"./parsers/Hour1To24Parser.js\";\nimport { MinuteParser } from \"./parsers/MinuteParser.js\";\nimport { SecondParser } from \"./parsers/SecondParser.js\";\nimport { FractionOfSecondParser } from \"./parsers/FractionOfSecondParser.js\";\nimport { ISOTimezoneWithZParser } from \"./parsers/ISOTimezoneWithZParser.js\";\nimport { ISOTimezoneParser } from \"./parsers/ISOTimezoneParser.js\";\nimport { TimestampSecondsParser } from \"./parsers/TimestampSecondsParser.js\";\nimport { TimestampMillisecondsParser } from \"./parsers/TimestampMillisecondsParser.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\nexport const parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n","import { Parser } from \"../Parser.js\";\n\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return (\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n\n      // A, B\n      case \"GGGGG\":\n        return match.era(dateString, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return (\n          match.era(dateString, { width: \"wide\" }) ||\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { getWeekYear } from \"../../../getWeekYear.js\";\n\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"YY\",\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\n// ISO week-numbering year\nexport class ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"R\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    \"G\",\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\nexport class ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"u\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"G\", \"y\", \"Y\", \"R\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setWeek } from \"../../../setWeek.js\";\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// Local week of year\nexport class LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"w\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"wo\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getWeek } from \"./getWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport function setWeek(date, week, options) {\n  const date_ = toDate(date, options?.in);\n  const diff = getWeek(date_, options) - week;\n  date_.setDate(date_.getDate() - diff * 7);\n  return toDate(date_, options?.in);\n}\n\n// Fallback for modularized imports:\nexport default setWeek;\n","import { setISOWeek } from \"../../../setISOWeek.js\";\nimport { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// ISO week of year\nexport class ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"I\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"Io\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getISOWeek } from \"./getISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISOWeek} function options.\n */\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The `Date` type of the context function.\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport function setISOWeek(date, week, options) {\n  const _date = toDate(date, options?.in);\n  const diff = getISOWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setISOWeek;\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case \"Do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\n// Day of week\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Local day of week\nexport class LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"e\":\n      case \"ee\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"eo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"eee\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"eeeee\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"eeee\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Stand-alone local day of week\nexport class StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"c\":\n      case \"cc\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"co\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"ccc\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // T\n      case \"ccccc\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // Tuesday\n      case \"cccc\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISODay } from \"../../../setISODay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// ISO day of week\nexport class ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case \"io\":\n        return match.ordinalNumber(dateString, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // T\n      case \"iiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case \"iiiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"short\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case \"iiii\":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"abbreviated\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n      case \"aaa\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"aaaaa\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"b\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n      case \"bbb\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"bbbbb\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\n// in the morning, in the afternoon, in the evening, at night\nexport class DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"H\":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case \"Ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"K\":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case \"Ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"h\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"k\":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case \"ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"H\", \"K\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"m\":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case \"mo\":\n        return match.ordinalNumber(dateString, { unit: \"minute\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"s\":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case \"so\":\n        return match.ordinalNumber(dateString, { unit: \"second\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\nexport class FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.trunc(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601. +00:00 is `'Z'`)\nexport class ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"XX\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"XXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"XXXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"XXX\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"xxxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getDefaultOptions } from \"./getDefaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\nimport { DateTimezoneSetter } from \"./parse/_lib/Setter.js\";\nimport { parsers } from \"./parse/_lib/parsers.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { longFormatters, parsers };\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangeably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nexport function parse(dateStr, formatStr, referenceDate, options) {\n  const invalidDate = () => constructFrom(options?.in || referenceDate, NaN);\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (!formatStr)\n    return dateStr ? invalidDate() : toDate(referenceDate, options?.in);\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn't specified, it will try to use the context or\n  // the reference date and fallback to the system time zone.\n  const setters = [new DateTimezoneSetter(options?.in, referenceDate)];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn't contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === \"*\" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn't contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return invalidDate();\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return invalidDate();\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return invalidDate();\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate, options?.in);\n\n  if (isNaN(+date)) return invalidDate();\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return invalidDate();\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return date;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default parse;\n","import { getDefaultOptions as getInternalDefaultOptions } from \"./_lib/defaultOptions.js\";\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nexport function getDefaultOptions() {\n  return Object.assign({}, getInternalDefaultOptions());\n}\n\n// Fallback for modularized imports:\nexport default getDefaultOptions;\n","import {\n  $cityText,\n  $dateDayText,\n  $descriptionText,\n  $feelsLikeText,\n  $humidityText,\n  $loadingScreen,\n  $tempText,\n  $todayPanelImg,\n  $windSpeedText,\n} from \"./cacheDOM.js\";\nimport { parse, format } from \"date-fns\";\nimport { convertTemperature } from \"../core/weatherServices.js\";\n\nasync function renderCityData(cityObj) {\n  renderTemperature(cityObj);\n  let imgsrc = await import(`../weather-icons/${cityObj.icon}.svg`);\n  $todayPanelImg.src = imgsrc.default;\n  $cityText.textContent = cityObj.cityName;\n  $humidityText.textContent = `Humidity: ${cityObj.humidity}%`;\n  $windSpeedText.textContent = `Wind: ${cityObj.windSpeed} km/h`;\n  $dateDayText.textContent = `${format(cityObj.date, \"do cccc\")}, ${format(parse(cityObj.time, \"HH:mm:ss\", new Date()), \"h:mm aaa\")}`;\n  $descriptionText.textContent = cityObj.description;\n}\n\nfunction renderTemperature(cityObj) {\n  if (cityObj.currentState === \"C\") {\n    $tempText.textContent = cityObj.temperature;\n    $feelsLikeText.textContent = `Feels like: ${cityObj.feelsLike}°`;\n  } else {\n    $tempText.textContent = convertTemperature.CtoF(cityObj.temperature);\n    $feelsLikeText.textContent = `Feels like: ${convertTemperature.CtoF(cityObj.feelsLike)}°`;\n  }\n}\n\nconst loadingScreen = {\n  showLoadingScreen() {\n    $loadingScreen.style.opacity = \"0.9\";\n    $loadingScreen.style.visibility = \"visible\";\n  },\n  hideLoadingScreen() {\n    $loadingScreen.style.opacity = \"0\";\n    $loadingScreen.style.visibility = \"hidden\";\n  },\n};\n\nexport { renderCityData, renderTemperature, loadingScreen };\n","import { cityWeatherData, currentCity } from \"../core/weatherModel.js\";\nimport { loadingScreen, renderCityData, renderTemperature } from \"./Display.js\";\nimport { validateCityTextInput } from \"./Validation.js\";\nimport {\n  $celciusBtn,\n  $cityTextInput,\n  $displayPanelBody,\n  $fahreinheitBtn,\n  $submitCityBtn,\n} from \"./cacheDOM.js\";\n\nasync function submitEventCallHandler() {\n  if (validateCityTextInput()) {\n    loadingScreen.showLoadingScreen();\n    $displayPanelBody.style.display = \"none\";\n    const cityName = $cityTextInput.value;\n    currentCity.cityObj = await cityWeatherData(cityName);\n    if (currentCity.cityObj) {\n      await renderCityData(currentCity.cityObj);\n      loadingScreen.hideLoadingScreen();\n      $displayPanelBody.style.display = \"block\";\n    } else {\n      loadingScreen.hideLoadingScreen();\n    }\n  } else {\n    alert(\"Enter a city name!\");\n  }\n}\n\n$submitCityBtn.addEventListener(\"click\", function () {\n  submitEventCallHandler();\n});\n$cityTextInput.addEventListener(\"keypress\", function (event) {\n  if (event.keyCode === 13 || event.key === \"Enter\") {\n    event.preventDefault();\n    submitEventCallHandler();\n  }\n});\n\n$fahreinheitBtn.addEventListener(\"click\", function () {\n  if (currentCity.cityObj.currentState === \"C\") {\n    currentCity.cityObj.currentState = \"F\";\n    renderTemperature(currentCity.cityObj);\n    $celciusBtn.style.color = \"rgb(158, 158, 158)\";\n    $fahreinheitBtn.style.color = \"black\";\n  }\n});\n\n$celciusBtn.addEventListener(\"click\", function () {\n  if (currentCity.cityObj.currentState === \"F\") {\n    currentCity.cityObj.currentState = \"C\";\n    renderTemperature(currentCity.cityObj);\n    $celciusBtn.style.color = \"black\";\n    $fahreinheitBtn.style.color = \"rgb(158, 158, 158)\";\n  }\n});\n","import { $cityTextInput } from \"./cacheDOM.js\";\n\nfunction validateCityTextInput() {\n  // checks for existence only\n  if ($cityTextInput.value !== \"\") {\n    return true;\n  }\n  return false;\n}\n\nexport { validateCityTextInput };\n","const API_key = \"KG6VNQ6N9DLV5J5HGB4E4WAKX\";\n\nexport default async function getWeatherData(cityName) {\n  try {\n    let response = await fetch(\n      `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${cityName}/?key=${API_key}`,\n      { mode: \"cors\" },\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    let data = await response.json();\n    return data;\n  } catch (err) {\n    console.log(\"Failed to fetch weather!\", err);\n    return null;\n  }\n}\n"],"names":["leafPrototypes","getProto","inProgress","dataWebpackPrefix","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","__webpack_module_cache__","moduleId","cachedModule","undefined","__webpack_modules__","m","getPrototypeOf","obj","value","mode","this","__esModule","ns","create","r","def","current","indexOf","getOwnPropertyNames","forEach","key","d","definition","defineProperty","enumerable","get","f","chunkId","all","reduce","promises","u","miniCssF","g","globalThis","Function","window","prop","prototype","hasOwnProperty","call","l","url","done","push","script","needAttach","scripts","document","getElementsByTagName","i","length","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","fn","setTimeout","bind","type","target","head","appendChild","Symbol","toStringTag","scriptUrl","importScripts","location","currentScript","tagName","toUpperCase","test","replace","p","installedChunks","j","installedChunkData","promise","reject","error","errorType","realSrc","message","name","request","webpackJsonpCallback","parentChunkLoadingFunction","data","chunkIds","moreModules","runtime","some","chunkLoadingGlobal","self","convertTemperature","input","Math","round","parseInt","currentCity","cityObj","$cityTextInput","querySelector","$submitCityBtn","$displayPanelBody","$cityText","$tempText","$feelsLikeText","$humidityText","$windSpeedText","$dateDayText","$descriptionText","$celciusBtn","$fahreinheitBtn","$loadingScreen","$todayPanelImg","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","options","width","String","defaultWidth","formats","formatLong","date","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","Array","isArray","array","predicate","findIndex","pattern","object","findKey","valueCallback","rest","slice","enUS","formatDistance","token","count","result","tokenValue","toString","addSuffix","comparison","formatRelative","_date","_baseDate","_options","localize","ordinalNumber","dirtyNumber","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseResult","any","index","weekStartsOn","firstWeekContainsDate","defaultOptions","getDefaultOptions","pow","millisecondsInWeek","constructFromSymbol","for","constructFrom","Date","constructor","toDate","argument","getTimezoneOffsetInMilliseconds","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","startOfDay","in","setHours","getDayOfYear","laterDate","earlierDate","laterDate_","earlierDate_","dates","normalize","find","normalizeDates","laterStartOfDay","earlierStartOfDay","laterTimestamp","earlierTimestamp","differenceInCalendarDays","date_","setFullYear","startOfYear","startOfWeek","locale","getDay","diff","setDate","startOfISOWeek","getISOWeekYear","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getTime","getISOWeek","fourthOfJanuary","startOfISOWeekYear","getWeekYear","firstWeekOfNextYear","firstWeekOfThisYear","getWeek","firstWeek","startOfWeekYear","addLeadingZeros","targetLength","abs","padStart","lightFormatters","y","signedYear","M","a","dayPeriodEnumValue","h","H","S","numberOfDigits","milliseconds","trunc","formatters","G","unit","Y","signedWeekYear","weekYear","R","Q","ceil","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","localDayOfWeek","c","isoDayOfWeek","toLowerCase","b","hours","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","T","offset","delimiter","sign","absOffset","minutes","dateLongFormatter","timeLongFormatter","longFormatters","P","datePattern","timePattern","dateTimeFormat","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isProtectedDayOfYearToken","isProtectedWeekYearToken","warnOrThrowProtectedError","format","_message","subject","console","warn","includes","RangeError","isValid","isNaN","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","formatStr","originalDate","parts","substring","firstCharacter","longFormatter","join","isToken","cleanEscapedString","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","formatter","matched","Setter","subPriority","validate","_utcDate","ValueSetter","validateValue","setValue","priority","super","set","flags","DateTimezoneSetter","reference","timestampIsSet","isConstructor","transpose","Parser","run","dateString","parse","setter","_value","numericPatterns","timezonePatterns","mapValue","parseFnResult","mapFn","parseNumericPattern","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","isLeapYearIndex","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","addDays","amount","NaN","setDay","currentDay","delta","setISODay","getISODay","parsers","incompatibleTokens","isTwoDigitYear","normalizedTwoDigitYear","_flags","firstWeekOfYear","setMonth","setWeek","setISOWeek","isLeapYear","subpriority","wholeWeekDays","floor","isPM","setMinutes","setSeconds","setMilliseconds","notWhitespaceRegExp","dateStr","referenceDate","invalidDate","assign","subFnOptions","setters","tokens","usedTokens","parser","incompatibleToken","usedToken","fullToken","uniquePrioritySetters","sort","filter","setterArray","renderTemperature","currentState","textContent","temperature","feelsLike","loadingScreen","showLoadingScreen","style","opacity","visibility","hideLoadingScreen","async","submitEventCallHandler","display","cityName","response","fetch","ok","status","json","err","log","getWeatherData","charAt","currentConditions","datetime","days","temp","humidity","feelslike","windSpeed","windspeed","icon","description","conditions","alert","cityWeatherData","imgsrc","default","renderCityData","addEventListener","keyCode","preventDefault","color"],"sourceRoot":""}